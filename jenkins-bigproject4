pipeline {
    agent {
        label 'mac-unity'
    }
    options {
        timeout(time: 120, unit: 'MINUTES')
        disableConcurrentBuilds()
        // ‚úÖ CRITIQUE : Garder le workspace pour le cache
        skipDefaultCheckout(false)
    }

    parameters {
        booleanParam(name: 'CLEAN_BUILD', defaultValue: false, description: 'Perform a clean build (removes cache)')
        booleanParam(name: 'FORCE_CACHE_REFRESH', defaultValue: false, description: 'Force refresh of Unity Library cache')
        choice(name: 'BUILD_TYPE', choices: ['Development', 'Release'], description: 'Type of build to perform')
        string(name: 'CUSTOM_MEMORY', defaultValue: '8192m', description: 'Maximum memory for Unity (recommended 8GB+ for large projects)')
    }
    
    environment {
        UNITY_PATH = "/Applications/Unity/Hub/Editor/6000.1.3f1/Unity.app/Contents/MacOS/Unity"
        CACHE_VERSION = "v3.0" // Incr√©menter pour nouvelle strat√©gie
    }
    
    stages {
        stage('üîç Unity Cache Diagnostic') {
            steps {
                script {
                    sh '''
                    echo "=== UNITY CACHE DIAGNOSTIC CRITIQUE ==="
                    echo "Workspace: $WORKSPACE"
                    echo "Branch: $BRANCH_NAME"
                    echo "Build: $BUILD_NUMBER"
                    echo ""
                    
                    # ‚úÖ V√©rification Unity Library - LES VRAIS R√âPERTOIRES
                    if [ -d "Library" ]; then
                        echo "‚úÖ Library exists"
                        echo "Library subdirs:"
                        ls -la Library/ | head -10
                        echo ""
                        
                        # ‚úÖ CRITIQUE : Ces r√©pertoires DOIVENT exister pour le cache Unity
                        for dir in "ArtifactDB" "StateCache" "ShaderCache" "PackageCache"; do
                            if [ -d "Library/$dir" ]; then
                                size=$(du -sh "Library/$dir" 2>/dev/null | cut -f1)
                                files=$(find "Library/$dir" -type f 2>/dev/null | wc -l)
                                echo "‚úÖ $dir: $size ($files files)"
                            else
                                echo "‚ùå $dir: MISSING - CACHE INUTILE"
                            fi
                        done
                    else
                        echo "‚ùå Library: TOTALEMENT ABSENTE"
                    fi
                    
                    echo ""
                    echo "=== Git Status ==="
                    git log --oneline -5
                    git submodule status | head -5
                    '''
                }
            }
        }

        stage('üö® FIXED Checkout') {
            steps {
                script {
                    // ‚úÖ CORRECTION CRITIQUE : PAS de shallow clone !
                    checkout scmGit(
                        branches: [[name: '*/master']],
                        extensions: [
                            // ‚ùå SUPPRIM√â : CloneOption depth=1 (CASSE Unity)
                            [$class: 'SubmoduleOption', 
                             disableSubmodules: false, 
                             parentCredentials: true, 
                             recursiveSubmodules: true,
                             trackingSubmodules: false]
                        ],
                        userRemoteConfigs: [[url: 'https://github.com/lsa26/KeepDriving']]
                    )
                    
                    env.PROJECT_HASH = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    echo "‚úÖ Git checkout complet - Unity peut utiliser les m√©tadonn√©es"
                }
            }
        }

        stage('üõ†Ô∏è Intelligent Cleanup') {
            when {
                anyOf {
                    expression { return params.CLEAN_BUILD }
                    expression { return params.FORCE_CACHE_REFRESH }
                }
            }
            steps {
                sh '''
                if [ "$CLEAN_BUILD" = "true" ]; then
                    echo "üßπ CLEAN BUILD - Suppression compl√®te"
                    rm -rf Library/ Temp/ obj/ Builds/
                elif [ "$FORCE_CACHE_REFRESH" = "true" ]; then
                    echo "üîÑ CACHE REFRESH - Nettoyage s√©lectif"
                    # ‚úÖ Garder certains √©l√©ments du cache Unity
                    rm -rf Library/ArtifactDB Library/StateCache
                    rm -rf Temp/ obj/
                fi
                '''
            }
        }

        stage('üì¶ CORRECTED Unity Cache Restore') {
            when {
                expression { !params.CLEAN_BUILD }
            }
            steps {
                script {
                    try {
                        echo "üîÑ Restoration cache Unity avec VRAIS paths..."
                        // ‚úÖ CORRECTION : Vrais r√©pertoires Unity critiques
                        readCache name: "unity-core-${CACHE_VERSION}", 
                                 includes: 'Library/ArtifactDB/**,Library/StateCache/**,Library/ShaderCache/**,Library/APIUpdater/**,Library/BuildPlayerData/**',
                                 excludes: 'Library/Logs/**,Library/LastSceneManagerSetup.txt,Library/CurrentLayout*.dwlt'
                        
                        readCache name: "unity-packages-${CACHE_VERSION}",
                                 includes: 'Library/PackageCache/**,Packages/**'
                        
                        env.CACHE_RESTORED = "true"
                        echo "‚úÖ Cache Unity restaur√© avec succ√®s"
                        
                        // ‚úÖ Validation du cache
                        sh '''
                        echo "üîç Validation cache restaur√©:"
                        for dir in "ArtifactDB" "StateCache" "ShaderCache"; do
                            if [ -d "Library/$dir" ] && [ "$(ls -A Library/$dir)" ]; then
                                echo "‚úÖ $dir: OK"
                            else
                                echo "‚ùå $dir: VIDE OU ABSENT"
                            fi
                        done
                        '''
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Cache miss (normal au premier build): ${e.message}"
                        env.CACHE_RESTORED = "false"
                    }
                }
            }
        }

        stage('üéØ Unity Build - Monitoring Cache') {
            steps {
                script {
                    def buildStartTime = System.currentTimeMillis()
                    
                    sh '''
                    echo "üöÄ Unity Build avec monitoring cache..."
                    echo "Cache restaur√©: ${CACHE_RESTORED:-false}"
                    
                    # ‚úÖ Options Unity pour gros projets
                    BUILD_ARGS="-batchmode -nographics -silent-crashes -quit"
                    BUILD_ARGS="$BUILD_ARGS -projectPath $WORKSPACE"
                    BUILD_ARGS="$BUILD_ARGS -buildTarget Android"
                    BUILD_ARGS="$BUILD_ARGS -logFile $WORKSPACE/unity_build.log"
                    
                    # ‚úÖ CRITIQUE : Forcer Unity √† utiliser le cache
                    export UNITY_CACHE_FOLDER="$WORKSPACE/Library"
                    
                    echo "‚è∞ D√©but build: $(date)"
                    BUILD_START=$(date +%s)
                    
                    "$UNITY_PATH" $BUILD_ARGS -executeMethod BuildAndroid.Build
                    
                    BUILD_END=$(date +%s)
                    BUILD_TIME=$((BUILD_END - BUILD_START))
                    
                    echo "‚è±Ô∏è Build termin√© en $BUILD_TIME secondes"
                    
                    # ‚úÖ ANALYSE DU CACHE - CRITIQUE !
                    if [ -f "unity_build.log" ]; then
                        echo ""
                        echo "üîç ANALYSE CACHE UNITY:"
                        
                        # V√©rifier si Unity a utilis√© le cache
                        if grep -q "Refreshing native plugins" "unity_build.log"; then
                            echo "‚ùå PLUGINS REFRESHED - Cache partiellement utilis√©"
                        else
                            echo "‚úÖ Pas de refresh plugins - Cache efficace"
                        fi
                        
                        if grep -q "Import took" "unity_build.log"; then
                            echo "‚ùå IMPORT ASSETS - Cache non utilis√©:"
                            grep "Import took" "unity_build.log" | head -5
                        else
                            echo "‚úÖ Pas d'import assets - Cache parfait"
                        fi
                        
                        if grep -q "Library rebuild" "unity_build.log"; then
                            echo "‚ùå LIBRARY REBUILD - Cache rat√©:"
                            grep "Library rebuild" "unity_build.log"
                        else
                            echo "‚úÖ Pas de rebuild Library - Cache utilis√©"
                        fi
                        
                        # ‚úÖ Temps de build analysis
                        if [ "${CACHE_RESTORED}" = "true" ] && [ $BUILD_TIME -lt 300 ]; then
                            echo "üöÄ EXCELLENT: Cache fonctionne (< 5min)"
                        elif [ "${CACHE_RESTORED}" = "true" ] && [ $BUILD_TIME -gt 900 ]; then
                            echo "‚ùå PROBL√àME: Cache non utilis√© (> 15min avec cache)"
                        elif [ "${CACHE_RESTORED}" = "false" ]; then
                            echo "‚ÑπÔ∏è Premier build - cr√©ation du cache"
                        fi
                        
                        echo ""
                        echo "üìä R√âSUM√â BUILD:"
                        echo "Temps: ${BUILD_TIME}s"
                        echo "Cache: ${CACHE_RESTORED:-false}"
                        echo "Hash: $PROJECT_HASH"
                    fi
                    
                    # V√©rifier APK
                    if [ -f "Builds/CloudBeesDemo.apk" ]; then
                        echo "‚úÖ APK g√©n√©r√©: $(du -h Builds/CloudBeesDemo.apk | cut -f1)"
                    else
                        echo "‚ùå √âCHEC: APK non g√©n√©r√©"
                        exit 1
                    fi
                    '''
                    
                    def buildEndTime = System.currentTimeMillis()
                    def totalTime = (buildEndTime - buildStartTime) / 1000
                    
                    echo "üéØ M√âTRIQUES FINALES:"
                    echo "   Temps total: ${totalTime}s"
                    echo "   Cache utilis√©: ${env.CACHE_RESTORED}"
                    
                    // ‚úÖ Alertes performance
                    if (env.CACHE_RESTORED == "true" && totalTime > 600) {
                        error "‚ùå CACHE INEFFICACE: ${totalTime}s avec cache - Investigation n√©cessaire"
                    }
                }
            }
        }

        stage('üíæ CORRECTED Cache Save') {
            steps {
                script {
                    try {
                        // ‚úÖ SAUVEGARDE avec les VRAIS paths Unity
                        writeCache name: "unity-core-${CACHE_VERSION}",
                                  includes: 'Library/ArtifactDB/**,Library/StateCache/**,Library/ShaderCache/**,Library/APIUpdater/**,Library/BuildPlayerData/**',
                                  excludes: 'Library/Logs/**,Library/LastSceneManagerSetup.txt,Library/CurrentLayout*.dwlt,Library/**/*.tmp'
                        
                        writeCache name: "unity-packages-${CACHE_VERSION}",
                                  includes: 'Library/PackageCache/**,Packages/**'
                        
                        echo "‚úÖ Cache Unity sauvegard√© - prochain build sera BEAUCOUP plus rapide"
                        
                        // ‚úÖ M√©triques cache
                        sh '''
                        echo "üìä CACHE SAUVEGARD√â:"
                        for dir in "ArtifactDB" "StateCache" "ShaderCache" "PackageCache"; do
                            if [ -d "Library/$dir" ]; then
                                size=$(du -sh "Library/$dir" | cut -f1)
                                echo "- $dir: $size"
                            fi
                        done
                        '''
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è √âchec sauvegarde cache: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                sh '''
                echo ""
                echo "üéâ BUILD R√âUSSI !"
                echo "==============="
                
                if [ "${CACHE_RESTORED}" = "true" ]; then
                    echo "‚úÖ Cache utilis√© - Performance optimale"
                    echo "üî• PROCHAIN BUILD: Performance similaire"
                else
                    echo "‚ÑπÔ∏è Cache cr√©√© pour la premi√®re fois"
                    echo "üöÄ PROCHAIN BUILD: Sera 60-80% plus rapide !"
                fi
                
                echo ""
                echo "üì± APK g√©n√©r√©: $(ls -lh Builds/*.apk 2>/dev/null || echo 'Non trouv√©')"
                '''
            }
        }
        failure {
            script {
                echo """
                ‚ùå BUILD √âCHOU√â
                
                üîç V√âRIFICATIONS:
                1. Logs Unity: cat unity_build.log | tail -50
                2. √âtat Library: ls -la Library/
                3. Espace disque: df -h
                4. M√©moire: top -l 1 | grep Unity
                """
                
                // ‚úÖ Diagnostic automatique en cas d'√©chec
                sh '''
                echo "üö® DIAGNOSTIC √âCHEC:"
                if [ -f "unity_build.log" ]; then
                    echo "Derni√®res erreurs Unity:"
                    grep -i "error\\|exception\\|failed" "unity_build.log" | tail -10
                fi
                
                echo "√âtat final Library:"
                ls -la Library/ 2>/dev/null || echo "Library absente"
                '''
            }
        }
        always {
            archiveArtifacts artifacts: 'unity_build.log,Builds/*.apk', allowEmptyArchive: true
        }
    }
}
