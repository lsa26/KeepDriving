pipeline {
    agent {
        label 'mac-unity'
    }
    options {
        timeout(time: 120, unit: 'MINUTES')
        disableConcurrentBuilds()
        // ‚úÖ FIX: Skip default checkout since we do custom checkout
        skipDefaultCheckout(true)
    }

    parameters {
        booleanParam(name: 'CLEAN_BUILD', defaultValue: false, description: 'Perform a clean build (removes cache)')
        booleanParam(name: 'FORCE_CACHE_REFRESH', defaultValue: false, description: 'Force refresh of Unity Library cache')
        choice(name: 'BUILD_TYPE', choices: ['Development', 'Release'], description: 'Type of build to perform')
        string(name: 'CUSTOM_MEMORY', defaultValue: '8192m', description: 'Maximum memory for Unity (recommended 8GB+ for large projects)')
    }
    
    environment {
        UNITY_PATH = "/Applications/Unity/Hub/Editor/6000.1.3f1/Unity.app/Contents/MacOS/Unity"
        CACHE_VERSION = "v3.0"
    }
    
    stages {
        stage('üö® FIXED Checkout') {
            steps {
                script {
                    echo "üîÑ Starting Git checkout..."
                    
                    // ‚úÖ FIX: Proper checkout with error handling
                    try {
                        checkout scmGit(
                            branches: [[name: '*/master']],
                            extensions: [
                                [$class: 'SubmoduleOption', 
                                 disableSubmodules: false, 
                                 parentCredentials: true, 
                                 recursiveSubmodules: true,
                                 trackingSubmodules: false]
                            ],
                            userRemoteConfigs: [[url: 'https://github.com/lsa26/KeepDriving']]
                        )
                        
                        env.PROJECT_HASH = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                        echo "‚úÖ Git checkout successful - Hash: ${env.PROJECT_HASH}"
                        
                        // Verify checkout worked
                        sh '''
                        echo "=== Checkout Verification ==="
                        pwd
                        ls -la
                        git status
                        echo "Branch: $(git branch --show-current)"
                        echo "Commit: $(git log --oneline -1)"
                        '''
                        
                    } catch (Exception e) {
                        error "‚ùå Git checkout failed: ${e.message}"
                    }
                }
            }
        }

        stage('üîç Unity Cache Diagnostic') {
            steps {
                script {
                    sh '''
                    echo "=== UNITY CACHE DIAGNOSTIC ==="
                    echo "Workspace: $WORKSPACE"
                    echo "Branch: $(git branch --show-current 2>/dev/null || echo 'Unknown')"
                    echo "Build: $BUILD_NUMBER"
                    echo "Project Hash: ${PROJECT_HASH:-Unknown}"
                    echo ""
                    
                    # ‚úÖ Check Unity Library directories
                    if [ -d "Library" ]; then
                        echo "‚úÖ Library exists"
                        echo "Library subdirs:"
                        ls -la Library/ | head -10
                        echo ""
                        
                        # Check critical Unity cache directories
                        for dir in "ArtifactDB" "StateCache" "ShaderCache" "PackageCache"; do
                            if [ -d "Library/$dir" ]; then
                                size=$(du -sh "Library/$dir" 2>/dev/null | cut -f1)
                                files=$(find "Library/$dir" -type f 2>/dev/null | wc -l)
                                echo "‚úÖ $dir: $size ($files files)"
                            else
                                echo "‚ùå $dir: MISSING - Will be created during build"
                            fi
                        done
                    else
                        echo "‚ùå Library: NOT PRESENT - First build or clean workspace"
                    fi
                    
                    echo ""
                    echo "=== Project Structure ==="
                    ls -la
                    echo ""
                    echo "=== Git Info ==="
                    git log --oneline -3
                    if [ -f ".gitmodules" ]; then
                        echo "Submodules:"
                        git submodule status | head -5
                    fi
                    '''
                }
            }
        }

        stage('üõ†Ô∏è Intelligent Cleanup') {
            when {
                anyOf {
                    expression { return params.CLEAN_BUILD }
                    expression { return params.FORCE_CACHE_REFRESH }
                }
            }
            steps {
                sh '''
                if [ "$CLEAN_BUILD" = "true" ]; then
                    echo "üßπ CLEAN BUILD - Full cleanup"
                    rm -rf Library/ Temp/ obj/ Builds/
                    echo "‚úÖ Workspace cleaned"
                elif [ "$FORCE_CACHE_REFRESH" = "true" ]; then
                    echo "üîÑ CACHE REFRESH - Selective cleanup"
                    # Keep some Unity cache elements
                    rm -rf Library/ArtifactDB Library/StateCache
                    rm -rf Temp/ obj/
                    echo "‚úÖ Cache refreshed"
                fi
                '''
            }
        }

        stage('üì¶ Unity Cache Restore') {
            when {
                expression { !params.CLEAN_BUILD }
            }
            steps {
                script {
                    try {
                        echo "üîÑ Restoring Unity cache..."
                        
                        // Try to restore cache
                        readCache name: "unity-core-${CACHE_VERSION}", 
                                 includes: 'Library/ArtifactDB/**,Library/StateCache/**,Library/ShaderCache/**,Library/APIUpdater/**,Library/BuildPlayerData/**',
                                 excludes: 'Library/Logs/**,Library/LastSceneManagerSetup.txt,Library/CurrentLayout*.dwlt'
                        
                        readCache name: "unity-packages-${CACHE_VERSION}",
                                 includes: 'Library/PackageCache/**,Packages/**'
                        
                        env.CACHE_RESTORED = "true"
                        echo "‚úÖ Unity cache restored successfully"
                        
                        // Validate restored cache
                        sh '''
                        echo "üîç Cache validation:"
                        for dir in "ArtifactDB" "StateCache" "ShaderCache"; do
                            if [ -d "Library/$dir" ] && [ "$(ls -A Library/$dir 2>/dev/null)" ]; then
                                echo "‚úÖ $dir: OK"
                            else
                                echo "‚ùå $dir: EMPTY OR MISSING"
                            fi
                        done
                        '''
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Cache miss (normal for first build): ${e.message}"
                        env.CACHE_RESTORED = "false"
                    }
                }
            }
        }

        stage('üéØ Unity Build - Monitoring Cache') {
            steps {
                script {
                    def buildStartTime = System.currentTimeMillis()
                    
                    sh '''
                    echo "üöÄ Starting Unity build with cache monitoring..."
                    echo "Cache restored: ${CACHE_RESTORED:-false}"
                    echo "Build type: ${BUILD_TYPE:-Development}"
                    
                    # ‚úÖ Unity build arguments for large projects
                    BUILD_ARGS="-batchmode -nographics -silent-crashes -quit"
                    BUILD_ARGS="$BUILD_ARGS -projectPath $WORKSPACE"
                    BUILD_ARGS="$BUILD_ARGS -buildTarget Android"
                    BUILD_ARGS="$BUILD_ARGS -logFile $WORKSPACE/unity_build.log"
                    
                    # ‚úÖ Force Unity to use workspace cache
                    export UNITY_CACHE_FOLDER="$WORKSPACE/Library"
                    
                    # Create Builds directory
                    mkdir -p Builds
                    
                    echo "‚è∞ Build start: $(date)"
                    BUILD_START=$(date +%s)
                    
                    # ‚úÖ FIX: Add error handling for Unity execution
                    if [ ! -f "$UNITY_PATH" ]; then
                        echo "‚ùå Unity not found at: $UNITY_PATH"
                        echo "Available Unity versions:"
                        ls -la /Applications/Unity/Hub/Editor/ 2>/dev/null || echo "Unity Hub not found"
                        exit 1
                    fi
                    
                    echo "Starting Unity with args: $BUILD_ARGS"
                    
                    # Execute Unity build
                    if "$UNITY_PATH" $BUILD_ARGS -executeMethod BuildAndroid.Build; then
                        echo "‚úÖ Unity build completed successfully"
                    else
                        echo "‚ùå Unity build failed"
                        if [ -f "unity_build.log" ]; then
                            echo "=== Unity Build Log (last 30 lines) ==="
                            tail -30 "unity_build.log"
                        fi
                        exit 1
                    fi
                    
                    BUILD_END=$(date +%s)
                    BUILD_TIME=$((BUILD_END - BUILD_START))
                    
                    echo "‚è±Ô∏è Build completed in $BUILD_TIME seconds"
                    
                    # ‚úÖ Cache analysis
                    if [ -f "unity_build.log" ]; then
                        echo ""
                        echo "üîç UNITY CACHE ANALYSIS:"
                        
                        # Check if Unity used cache effectively
                        if grep -q "Refreshing native plugins" "unity_build.log"; then
                            echo "‚ùå PLUGINS REFRESHED - Cache partially used"
                        else
                            echo "‚úÖ No plugin refresh - Cache effective"
                        fi
                        
                        if grep -q "Import took" "unity_build.log"; then
                            echo "‚ùå ASSETS IMPORTED - Cache not used:"
                            grep "Import took" "unity_build.log" | head -3
                        else
                            echo "‚úÖ No asset imports - Perfect cache"
                        fi
                        
                        if grep -q "Library rebuild" "unity_build.log"; then
                            echo "‚ùå LIBRARY REBUILD - Cache missed:"
                            grep "Library rebuild" "unity_build.log"
                        else
                            echo "‚úÖ No Library rebuild - Cache used"
                        fi
                        
                        # Build time analysis
                        if [ "${CACHE_RESTORED}" = "true" ] && [ $BUILD_TIME -lt 300 ]; then
                            echo "üöÄ EXCELLENT: Cache working perfectly (< 5min)"
                        elif [ "${CACHE_RESTORED}" = "true" ] && [ $BUILD_TIME -gt 900 ]; then
                            echo "‚ùå ISSUE: Cache not effective (> 15min with cache)"
                        elif [ "${CACHE_RESTORED}" = "false" ]; then
                            echo "‚ÑπÔ∏è First build - creating cache"
                        fi
                        
                        echo ""
                        echo "üìä BUILD SUMMARY:"
                        echo "Time: ${BUILD_TIME}s"
                        echo "Cache: ${CACHE_RESTORED:-false}"
                        echo "Hash: $PROJECT_HASH"
                    fi
                    
                    # Verify build output
                    if [ -f "Builds/CloudBeesDemo.apk" ]; then
                        echo "‚úÖ APK generated: $(du -h Builds/CloudBeesDemo.apk | cut -f1)"
                    elif [ -f "Builds/"*.apk ]; then
                        echo "‚úÖ APK found: $(ls -lh Builds/*.apk)"
                    else
                        echo "‚ùå BUILD FAILED: No APK generated"
                        echo "Build directory contents:"
                        ls -la Builds/ 2>/dev/null || echo "Builds directory not found"
                        exit 1
                    fi
                    '''
                    
                    def buildEndTime = System.currentTimeMillis()
                    def totalTime = (buildEndTime - buildStartTime) / 1000
                    
                    echo "üéØ FINAL METRICS:"
                    echo "   Total time: ${totalTime}s"
                    echo "   Cache used: ${env.CACHE_RESTORED}"
                    
                    // Performance alerts
                    if (env.CACHE_RESTORED == "true" && totalTime > 600) {
                        echo "‚ö†Ô∏è WARNING: Cache ineffective - ${totalTime}s with cache"
                    }
                }
            }
        }

        stage('üíæ Cache Save') {
            steps {
                script {
                    try {
                        echo "üíæ Saving Unity cache for future builds..."
                        
                        // Save Unity cache
                        writeCache name: "unity-core-${CACHE_VERSION}",
                                  includes: 'Library/ArtifactDB/**,Library/StateCache/**,Library/ShaderCache/**,Library/APIUpdater/**,Library/BuildPlayerData/**',
                                  excludes: 'Library/Logs/**,Library/LastSceneManagerSetup.txt,Library/CurrentLayout*.dwlt,Library/**/*.tmp'
                        
                        writeCache name: "unity-packages-${CACHE_VERSION}",
                                  includes: 'Library/PackageCache/**,Packages/**'
                        
                        echo "‚úÖ Unity cache saved - next build will be much faster"
                        
                        // Cache metrics
                        sh '''
                        echo "üìä CACHE SAVED:"
                        for dir in "ArtifactDB" "StateCache" "ShaderCache" "PackageCache"; do
                            if [ -d "Library/$dir" ]; then
                                size=$(du -sh "Library/$dir" | cut -f1)
                                echo "- $dir: $size"
                            fi
                        done
                        '''
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Cache save failed: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                sh '''
                echo ""
                echo "üéâ BUILD SUCCESSFUL!"
                echo "=================="
                
                if [ "${CACHE_RESTORED}" = "true" ]; then
                    echo "‚úÖ Cache used - Optimal performance"
                    echo "üî• NEXT BUILD: Similar performance expected"
                else
                    echo "‚ÑπÔ∏è Cache created for first time"
                    echo "üöÄ NEXT BUILD: Will be 60-80% faster!"
                fi
                
                echo ""
                echo "üì± APK generated:"
                ls -lh Builds/*.apk 2>/dev/null || echo 'APK not found in expected location'
                
                echo ""
                echo "üìä Build completed successfully at $(date)"
                '''
            }
        }
        failure {
            script {
                echo """
                ‚ùå BUILD FAILED
                
                üîç TROUBLESHOOTING STEPS:
                1. Check Unity logs: cat unity_build.log | tail -50
                2. Verify Library state: ls -la Library/
                3. Check disk space: df -h
                4. Verify Unity installation: ls -la $UNITY_PATH
                """
                
                sh '''
                echo "üö® FAILURE DIAGNOSTICS:"
                
                echo "=== Workspace State ==="
                pwd
                ls -la
                
                echo "=== Git State ==="
                git status 2>/dev/null || echo "Not a git repository"
                
                echo "=== Unity Log Errors ==="
                if [ -f "unity_build.log" ]; then
                    echo "Last 20 lines of Unity log:"
                    tail -20 "unity_build.log"
                    echo ""
                    echo "Unity errors:"
                    grep -i "error\\|exception\\|failed" "unity_build.log" | tail -10
                else
                    echo "unity_build.log not found"
                fi
                
                echo "=== Library State ==="
                if [ -d "Library" ]; then
                    echo "Library exists:"
                    ls -la Library/ | head -10
                else
                    echo "Library directory missing"
                fi
                
                echo "=== Unity Installation ==="
                if [ -f "$UNITY_PATH" ]; then
                    echo "Unity found at: $UNITY_PATH"
                else
                    echo "Unity NOT found at: $UNITY_PATH"
                    echo "Available Unity versions:"
                    ls -la /Applications/Unity/Hub/Editor/ 2>/dev/null || echo "Unity Hub directory not found"
                fi
                '''
            }
        }
        always {
            archiveArtifacts artifacts: 'unity_build.log,Builds/*.apk', allowEmptyArchive: true
        }
    }
}
